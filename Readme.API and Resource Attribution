Global Public Holiday Finder
Assignment Overview
This assignment focuses on developing a practical application that leverages external APIs and deploying it to a web infrastructure. Part One involved implementing the "Global Public Holiday Finder" locally. Part Two (specifically Part 2A) focuses on containerizing this application, publishing it to Docker Hub, and deploying it to a three-lab-container setup (Web01, Web02, Lb01) with HAProxy acting as a load balancer to distribute traffic. The goal is to create a useful application that provides genuine value.

Part One: Local Implementation
Application Purpose & Features
The "Global Public Holiday Finder" is a web application designed to help users easily find public holidays for various countries and years. It provides a simple, intuitive interface to fetch and display holiday data, serving a meaningful purpose for individuals planning travel, work, or personal events.
Key Features:
API Integration: Fetches public holiday data from the Nager.Date Public Holiday API (no API key required).
Country and Year Selection: Users can select a country from a dropdown list and input a specific year to find holidays.
Dynamic Data Display: Presents retrieved holiday data in a clear, tabular format.
User Interaction: Allows searching for specific holidays, and sorting by date or name.
Responsive UI: Built with HTML, CSS, and JavaScript for a user-friendly experience across different devices.
Error Handling
The application includes basic error handling to gracefully manage situations where API calls might fail (e.g., network issues, invalid responses from the API). In such cases, a user-friendly message is displayed, indicating that holidays could not be fetched.

Part Two A: Deployment (Docker Containers + Docker Hub)
This section details the containerization, Docker Hub publication, and deployment of the "Global Public Holiday Finder" application to the provided lab infrastructure (web-01, web-02, lb-01).
Project Structure
my-holiday-app/
├── index.html
├── styles.css
├── script.js
├── Dockerfile
├── nginx.conf
└── README.md


Docker Image Details
Docker Hub Repository URL: https://hub.docker.com/r/kamanzi22/holiday-finder
Image Name: kamanzi22/holiday-finder
Tags: v1, latest
Build Instructions
To build the Docker image locally, navigate to your project directory (e.g., my-holiday-app/) in your terminal and execute the following command:
Bash
docker build -t kamanzi22/holiday-finder:v1 .


Run Instructions (Local Testing)
After building, you can test the application locally by running the container and mapping port 8080 from the container to your host machine:
Bash
docker run -p 8080:8080 --name local-holiday-app kamanzi22/holiday-finder:v1


Verify that the application works by opening your web browser and navigating to http://localhost:8080.
Push to Docker Hub
Ensure you are logged into Docker Hub from your terminal.
Log in:
Bash
docker login


(Enter your Docker Hub username and password when prompted.)
Push the image:
Bash
docker push kamanzi22/holiday-finder:v1




Tag and push latest (recommended):
Bash
docker tag kamanzi22/holiday-finder:v1 kamanzi22/holiday-finder:latest
docker push kamanzi22/holiday-finder:latest




Deployment on Lab Machines (Web01, Web02)
The application has been successfully deployed using the following approach:
Docker Image Created: Built and pushed to Docker Hub as kamanzi22/holiday-finder:v1 and kamanzi22/holiday-finder:latest.
Application Files Copied: Static files (index.html, styles.css, script.js) were copied to both web-01 and web-02 containers.
Nginx Configuration: Nginx was configured to serve the application on port 80.
HAProxy Configuration: Load balancer configured to distribute traffic between web-01 (172.20.0.11:80) and web-02 (172.20.0.12:80).
Load Balancing: Round-robin distribution with custom X-Served-By header.
Deployment Steps for web-01:
SSH into web-01: ssh [your_username_for_lab_machines]@[web01_ip_address]
Pull the Docker Image: docker pull kamanzi22/holiday-finder:v1
Run the application container: docker run -d --name holiday-app --restart unless-stopped -p 8080:8080 kamanzi22/holiday-finder:v1
Verify internal reachability (optional but recommended): curl http://localhost:8080
Deployment Steps for web-02:
SSH into web-02: ssh [your_username_for_lab_machines]@[web02_ip_address]
Pull the Docker Image: docker pull kamanzi22/holiday-finder:v1
Run the application container: docker run -d --name holiday-app --restart unless-stopped -p 8080:8080 kamanzi22/holiday-finder:v1
Verify internal reachability (optional but recommended): curl http://localhost:8080
Load Balancer Configuration (Lb01)
The load balancer (lb-01) is configured using HAProxy to distribute incoming HTTP traffic between the two application instances running on web-01 and web-02.
SSH into lb-01:
Bash
ssh [your_username_for_lab_machines]@[lb01_ip_address]




Edit the HAProxy configuration file (/etc/haproxy/haproxy.cfg).
Bash
sudo nano /etc/haproxy/haproxy.cfg




Add or modify the following sections:
Code snippet
frontend http_front
    bind *:80
    default_backend webapps

backend webapps
    balance roundrobin
    server web01 172.20.0.11:8080 check
    server web02 172.20.0.12:8080 check


Note: The IP addresses 172.20.0.11 and 172.20.0.12 are common internal IPs for the web_infra_lab.git setup. Verify these are the correct internal network IPs for your web-01 and web-02 machines in your specific lab environment.
Reload HAProxy configuration:
Bash
docker exec -it lb-01 sh -c 'haproxy -sf $(pidof haproxy) -f /etc/haproxy/haproxy.cfg'




Testing Steps & Evidence
To verify the end-to-end deployment and confirm round-robin load balancing:
Test load balancing with custom headers:
Bash
for i in {1..5}; do echo "Request $i:"; curl -I http://localhost:8082 | grep "x-served-by"; echo; done


Test Results:
Request 1: x-served-by: web02
Request 2: x-served-by: web01
Request 3: x-served-by: web02
Request 4: x-served-by: web01
Request 5: x-served-by: web02




Verify application functionality:
Bash
curl -s http://localhost:8082 | grep -i "holiday"


Output:
<title>Global Public Holiday Finder</title>




Access Points:
Load Balanced Application: http://localhost:8082
Direct Access: http://localhost:8080 (web-01) and http://localhost:8081 (web-02)
Hardening Step (API Keys)
The Nager.Date Public Holiday API used in this application does not require an API key. However, for applications that do, the recommended approach is to pass them as environment variables to the Docker containers at runtime.
Example:
Bash
docker run -d --name my-app -e API_KEY="your_actual_secret_api_key" -p 8080:8080 [yourdockerhubuser]/my-app:v1


In the application code, the key would then be accessed from the environment variables (e.g., process.env.API_KEY in Node.js). For production, dedicated secrets management solutions should be used.
Challenges Encountered & Solutions
Challenge 1: Docker Desktop connection issues.
Solution: Waited for Docker Desktop to fully start up and verified connectivity with docker ps before proceeding.
Challenge 2: Docker Hub repository didn't exist.
Solution: Created the repository on Docker Hub and successfully pushed both v1 and latest tags.
Challenge 3: HAProxy configuration needed to be updated.
Solution: Recreated the HAProxy configuration file with the correct backend pointing to the application servers.
Challenge 4: Port conflicts during local testing.
Solution: Used port 8083 for local testing to avoid conflicts with the existing lab setup.

Deliverables
GitHub Repository: [Link to your GitHub repository]
Demo Video: [Link to your demo video]
API Credit & Acknowledgements
Public Holiday Data: Powered by the Nager.Date Public Holiday API.
Web Server: Nginx
Load Balancer: HAProxy
Containerization: Docker
